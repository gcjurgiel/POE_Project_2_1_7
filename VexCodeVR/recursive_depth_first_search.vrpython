{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n# the sides to check for an opening at\nangles_to_check = [0, 90, 270]\n\n# Recusive methos to solve the maze\ndef solveMaze(angle = 0):\n\n    # Check all sides to find the open path\n    for a in angles_to_check:\n        # Check if the forward path is availble\n        drivetrain.turn_to_heading(angle + a, DEGREES)\n        if (distance.get_distance(MM) > 100):\n            # drive to the open space, and recursivly call the method again\n            drivetrain.drive_for(FORWARD, 250, MM);\n            solveMaze(angle + a)\n        \n        # Check is the maze has been solved\n        if down_eye.detect(RED):\n            return\n\n    # Check is the maze has been solved\n    if down_eye.detect(RED):\n        return\n    \n    # if none are available, go back to where you came from\n    drivetrain.turn_to_heading(angle + 180, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n    \n\ndef main():    \n    # Clear the output\n    brain.clear()\n\n    # Initilize to full speed so the maze is solved as fast as possible\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n\n    # Reset the timer to get an acurate time measurment\n    brain.timer_reset()\n\n    # Recusivly solve the maze\n    solveMaze()\n\n    # Output the results\n    brain.print(\"Time it took to solve: \")\n    brain.print(brain.timer_time(SECONDS))\n    brain.print(\" seconds\")\n\n# VR threads â€” Do not delete\nvr_thread(main())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"WallMaze"}