{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n# Solves a maze by following the right wall all the way aroung the maze untill the end is reached.\ndef followRight():\n    # When the robot gets to the the end it will see red and stop \n    while not down_eye.detect(RED):\n\n        # turn to the right to cheack if thier is a wall is there. \n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n        # If there is a wall to the right the robot will turn back to the left\n        # to drive forward. but it will first cheack if there is a wall in it's\n        # way. It will contnue this pattern of cheaking and turning left untill\n        # an open path is found.\n        while True:\n            # If the path is open break from the loop to drive forward\n            if distance.get_distance(MM) > 100 :\n                break\n\n            # Otherwise turn to the left again\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n\n        # Drive forward since the path is no longer blocked\n        drivetrain.drive_for(FORWARD, 250, MM)\n\ndef main():\n    # Clear the output\n    brain.clear()\n\n    # Set speeds to max so it will solvethe maze a quickly as possible.\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n\n    # Reset the timer to get an acurate time reading for how long it took.\n    brain.timer_reset()\n\n    # Run the path solving algoithm\n    followRight()\n\n    # Output the tome data\n    brain.print(\"Time it took to solve: \")\n    brain.print(brain.timer_time(SECONDS))\n    brain.print(\" seconds\")\n\n# VR threads â€” Do not delete\nvr_thread(main())","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"WallMaze"}